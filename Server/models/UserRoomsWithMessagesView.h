/**
 *
 *  UserRoomsWithMessagesView.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace postgres
{

class UserRoomsWithMessagesView
{
  public:
    struct Cols
    {
        static const std::string _user_id;
        static const std::string _id;
        static const std::string _name;
        static const std::string _type;
        static const std::string _avatar_url;
        static const std::string _message_id;
        static const std::string _message_content;
        static const std::string _message_created_at;
        static const std::string _sender_id;
        static const std::string _sender_username;
        static const std::string _sender_avatar;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = void;
    int getPrimaryKey() const { assert(false); return 0; }

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit UserRoomsWithMessagesView(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit UserRoomsWithMessagesView(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    UserRoomsWithMessagesView(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    UserRoomsWithMessagesView() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column user_id  */
    ///Get the value of the column user_id, returns the default value if the column is null
    const int32_t &getValueOfUserId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getUserId() const noexcept;
    ///Set the value of the column user_id
    void setUserId(const int32_t &pUserId) noexcept;
    void setUserIdToNull() noexcept;

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const int32_t &pId) noexcept;
    void setIdToNull() noexcept;

    /**  For column name  */
    ///Get the value of the column name, returns the default value if the column is null
    const std::string &getValueOfName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getName() const noexcept;
    ///Set the value of the column name
    void setName(const std::string &pName) noexcept;
    void setName(std::string &&pName) noexcept;
    void setNameToNull() noexcept;

    /**  For column type  */
    ///Get the value of the column type, returns the default value if the column is null
    const std::string &getValueOfType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getType() const noexcept;
    ///Set the value of the column type
    void setType(const std::string &pType) noexcept;
    void setType(std::string &&pType) noexcept;
    void setTypeToNull() noexcept;

    /**  For column avatar_url  */
    ///Get the value of the column avatar_url, returns the default value if the column is null
    const std::string &getValueOfAvatarUrl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAvatarUrl() const noexcept;
    ///Set the value of the column avatar_url
    void setAvatarUrl(const std::string &pAvatarUrl) noexcept;
    void setAvatarUrl(std::string &&pAvatarUrl) noexcept;
    void setAvatarUrlToNull() noexcept;

    /**  For column message_id  */
    ///Get the value of the column message_id, returns the default value if the column is null
    const int32_t &getValueOfMessageId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getMessageId() const noexcept;
    ///Set the value of the column message_id
    void setMessageId(const int32_t &pMessageId) noexcept;
    void setMessageIdToNull() noexcept;

    /**  For column message_content  */
    ///Get the value of the column message_content, returns the default value if the column is null
    const std::string &getValueOfMessageContent() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getMessageContent() const noexcept;
    ///Set the value of the column message_content
    void setMessageContent(const std::string &pMessageContent) noexcept;
    void setMessageContent(std::string &&pMessageContent) noexcept;
    void setMessageContentToNull() noexcept;

    /**  For column message_created_at  */
    ///Get the value of the column message_created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfMessageCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getMessageCreatedAt() const noexcept;
    ///Set the value of the column message_created_at
    void setMessageCreatedAt(const ::trantor::Date &pMessageCreatedAt) noexcept;
    void setMessageCreatedAtToNull() noexcept;

    /**  For column sender_id  */
    ///Get the value of the column sender_id, returns the default value if the column is null
    const int32_t &getValueOfSenderId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getSenderId() const noexcept;
    ///Set the value of the column sender_id
    void setSenderId(const int32_t &pSenderId) noexcept;
    void setSenderIdToNull() noexcept;

    /**  For column sender_username  */
    ///Get the value of the column sender_username, returns the default value if the column is null
    const std::string &getValueOfSenderUsername() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSenderUsername() const noexcept;
    ///Set the value of the column sender_username
    void setSenderUsername(const std::string &pSenderUsername) noexcept;
    void setSenderUsername(std::string &&pSenderUsername) noexcept;
    void setSenderUsernameToNull() noexcept;

    /**  For column sender_avatar  */
    ///Get the value of the column sender_avatar, returns the default value if the column is null
    const std::string &getValueOfSenderAvatar() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSenderAvatar() const noexcept;
    ///Set the value of the column sender_avatar
    void setSenderAvatar(const std::string &pSenderAvatar) noexcept;
    void setSenderAvatar(std::string &&pSenderAvatar) noexcept;
    void setSenderAvatarToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 11;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<UserRoomsWithMessagesView>;
    friend drogon::orm::BaseBuilder<UserRoomsWithMessagesView, true, true>;
    friend drogon::orm::BaseBuilder<UserRoomsWithMessagesView, true, false>;
    friend drogon::orm::BaseBuilder<UserRoomsWithMessagesView, false, true>;
    friend drogon::orm::BaseBuilder<UserRoomsWithMessagesView, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<UserRoomsWithMessagesView>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> userId_;
    std::shared_ptr<int32_t> id_;
    std::shared_ptr<std::string> name_;
    std::shared_ptr<std::string> type_;
    std::shared_ptr<std::string> avatarUrl_;
    std::shared_ptr<int32_t> messageId_;
    std::shared_ptr<std::string> messageContent_;
    std::shared_ptr<::trantor::Date> messageCreatedAt_;
    std::shared_ptr<int32_t> senderId_;
    std::shared_ptr<std::string> senderUsername_;
    std::shared_ptr<std::string> senderAvatar_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[11]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[0])
        {
            sql += "user_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[1])
        {
            sql += "id,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "name,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "type,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "avatar_url,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "message_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "message_content,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "message_created_at,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "sender_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "sender_username,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "sender_avatar,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        int placeholder=1;
        char placeholderStr[64];
        size_t n=0;
        if(dirtyFlag_[0])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[1])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[2])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[3])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[4])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[5])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[6])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[7])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[8])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[9])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[10])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        if(needSelection)
        {
            sql.append(") returning *");
        }
        else
        {
            sql.append(1, ')');
        }
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace postgres
} // namespace drogon_model
