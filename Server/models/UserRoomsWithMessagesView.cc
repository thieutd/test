/**
 *
 *  UserRoomsWithMessagesView.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "UserRoomsWithMessagesView.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::postgres;

const std::string UserRoomsWithMessagesView::Cols::_user_id = "\"user_id\"";
const std::string UserRoomsWithMessagesView::Cols::_id = "\"id\"";
const std::string UserRoomsWithMessagesView::Cols::_name = "\"name\"";
const std::string UserRoomsWithMessagesView::Cols::_type = "\"type\"";
const std::string UserRoomsWithMessagesView::Cols::_avatar_url = "\"avatar_url\"";
const std::string UserRoomsWithMessagesView::Cols::_message_id = "\"message_id\"";
const std::string UserRoomsWithMessagesView::Cols::_message_content = "\"message_content\"";
const std::string UserRoomsWithMessagesView::Cols::_message_created_at = "\"message_created_at\"";
const std::string UserRoomsWithMessagesView::Cols::_sender_id = "\"sender_id\"";
const std::string UserRoomsWithMessagesView::Cols::_sender_username = "\"sender_username\"";
const std::string UserRoomsWithMessagesView::Cols::_sender_avatar = "\"sender_avatar\"";
const std::string UserRoomsWithMessagesView::primaryKeyName = "";
const bool UserRoomsWithMessagesView::hasPrimaryKey = false;
const std::string UserRoomsWithMessagesView::tableName = "\"user_rooms_with_messages_view\"";

const std::vector<typename UserRoomsWithMessagesView::MetaData> UserRoomsWithMessagesView::metaData_={
{"user_id","int32_t","integer",4,0,0,0},
{"id","int32_t","integer",4,0,0,0},
{"name","std::string","character varying",255,0,0,0},
{"type","std::string","USER-DEFINED",0,0,0,0},
{"avatar_url","std::string","character varying",1024,0,0,0},
{"message_id","int32_t","integer",4,0,0,0},
{"message_content","std::string","text",0,0,0,0},
{"message_created_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"sender_id","int32_t","integer",4,0,0,0},
{"sender_username","std::string","character varying",255,0,0,0},
{"sender_avatar","std::string","character varying",1024,0,0,0}
};
const std::string &UserRoomsWithMessagesView::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
UserRoomsWithMessagesView::UserRoomsWithMessagesView(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["avatar_url"].isNull())
        {
            avatarUrl_=std::make_shared<std::string>(r["avatar_url"].as<std::string>());
        }
        if(!r["message_id"].isNull())
        {
            messageId_=std::make_shared<int32_t>(r["message_id"].as<int32_t>());
        }
        if(!r["message_content"].isNull())
        {
            messageContent_=std::make_shared<std::string>(r["message_content"].as<std::string>());
        }
        if(!r["message_created_at"].isNull())
        {
            auto timeStr = r["message_created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                messageCreatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["sender_id"].isNull())
        {
            senderId_=std::make_shared<int32_t>(r["sender_id"].as<int32_t>());
        }
        if(!r["sender_username"].isNull())
        {
            senderUsername_=std::make_shared<std::string>(r["sender_username"].as<std::string>());
        }
        if(!r["sender_avatar"].isNull())
        {
            senderAvatar_=std::make_shared<std::string>(r["sender_avatar"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 11 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            type_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            avatarUrl_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            messageId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            messageContent_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                messageCreatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            senderId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            senderUsername_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            senderAvatar_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

UserRoomsWithMessagesView::UserRoomsWithMessagesView(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            avatarUrl_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            messageId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            messageContent_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                messageCreatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            senderId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            senderUsername_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            senderAvatar_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
}

UserRoomsWithMessagesView::UserRoomsWithMessagesView(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("avatar_url"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["avatar_url"].isNull())
        {
            avatarUrl_=std::make_shared<std::string>(pJson["avatar_url"].asString());
        }
    }
    if(pJson.isMember("message_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["message_id"].isNull())
        {
            messageId_=std::make_shared<int32_t>((int32_t)pJson["message_id"].asInt64());
        }
    }
    if(pJson.isMember("message_content"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["message_content"].isNull())
        {
            messageContent_=std::make_shared<std::string>(pJson["message_content"].asString());
        }
    }
    if(pJson.isMember("message_created_at"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["message_created_at"].isNull())
        {
            auto timeStr = pJson["message_created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                messageCreatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("sender_id"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["sender_id"].isNull())
        {
            senderId_=std::make_shared<int32_t>((int32_t)pJson["sender_id"].asInt64());
        }
    }
    if(pJson.isMember("sender_username"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["sender_username"].isNull())
        {
            senderUsername_=std::make_shared<std::string>(pJson["sender_username"].asString());
        }
    }
    if(pJson.isMember("sender_avatar"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["sender_avatar"].isNull())
        {
            senderAvatar_=std::make_shared<std::string>(pJson["sender_avatar"].asString());
        }
    }
}

void UserRoomsWithMessagesView::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            avatarUrl_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            messageId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            messageContent_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                messageCreatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            senderId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            senderUsername_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            senderAvatar_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
}

void UserRoomsWithMessagesView::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("avatar_url"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["avatar_url"].isNull())
        {
            avatarUrl_=std::make_shared<std::string>(pJson["avatar_url"].asString());
        }
    }
    if(pJson.isMember("message_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["message_id"].isNull())
        {
            messageId_=std::make_shared<int32_t>((int32_t)pJson["message_id"].asInt64());
        }
    }
    if(pJson.isMember("message_content"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["message_content"].isNull())
        {
            messageContent_=std::make_shared<std::string>(pJson["message_content"].asString());
        }
    }
    if(pJson.isMember("message_created_at"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["message_created_at"].isNull())
        {
            auto timeStr = pJson["message_created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                messageCreatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("sender_id"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["sender_id"].isNull())
        {
            senderId_=std::make_shared<int32_t>((int32_t)pJson["sender_id"].asInt64());
        }
    }
    if(pJson.isMember("sender_username"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["sender_username"].isNull())
        {
            senderUsername_=std::make_shared<std::string>(pJson["sender_username"].asString());
        }
    }
    if(pJson.isMember("sender_avatar"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["sender_avatar"].isNull())
        {
            senderAvatar_=std::make_shared<std::string>(pJson["sender_avatar"].asString());
        }
    }
}

const int32_t &UserRoomsWithMessagesView::getValueOfUserId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &UserRoomsWithMessagesView::getUserId() const noexcept
{
    return userId_;
}
void UserRoomsWithMessagesView::setUserId(const int32_t &pUserId) noexcept
{
    userId_ = std::make_shared<int32_t>(pUserId);
    dirtyFlag_[0] = true;
}
void UserRoomsWithMessagesView::setUserIdToNull() noexcept
{
    userId_.reset();
    dirtyFlag_[0] = true;
}

const int32_t &UserRoomsWithMessagesView::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &UserRoomsWithMessagesView::getId() const noexcept
{
    return id_;
}
void UserRoomsWithMessagesView::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[1] = true;
}
void UserRoomsWithMessagesView::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[1] = true;
}

const std::string &UserRoomsWithMessagesView::getValueOfName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserRoomsWithMessagesView::getName() const noexcept
{
    return name_;
}
void UserRoomsWithMessagesView::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[2] = true;
}
void UserRoomsWithMessagesView::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[2] = true;
}
void UserRoomsWithMessagesView::setNameToNull() noexcept
{
    name_.reset();
    dirtyFlag_[2] = true;
}

const std::string &UserRoomsWithMessagesView::getValueOfType() const noexcept
{
    static const std::string defaultValue = std::string();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserRoomsWithMessagesView::getType() const noexcept
{
    return type_;
}
void UserRoomsWithMessagesView::setType(const std::string &pType) noexcept
{
    type_ = std::make_shared<std::string>(pType);
    dirtyFlag_[3] = true;
}
void UserRoomsWithMessagesView::setType(std::string &&pType) noexcept
{
    type_ = std::make_shared<std::string>(std::move(pType));
    dirtyFlag_[3] = true;
}
void UserRoomsWithMessagesView::setTypeToNull() noexcept
{
    type_.reset();
    dirtyFlag_[3] = true;
}

const std::string &UserRoomsWithMessagesView::getValueOfAvatarUrl() const noexcept
{
    static const std::string defaultValue = std::string();
    if(avatarUrl_)
        return *avatarUrl_;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserRoomsWithMessagesView::getAvatarUrl() const noexcept
{
    return avatarUrl_;
}
void UserRoomsWithMessagesView::setAvatarUrl(const std::string &pAvatarUrl) noexcept
{
    avatarUrl_ = std::make_shared<std::string>(pAvatarUrl);
    dirtyFlag_[4] = true;
}
void UserRoomsWithMessagesView::setAvatarUrl(std::string &&pAvatarUrl) noexcept
{
    avatarUrl_ = std::make_shared<std::string>(std::move(pAvatarUrl));
    dirtyFlag_[4] = true;
}
void UserRoomsWithMessagesView::setAvatarUrlToNull() noexcept
{
    avatarUrl_.reset();
    dirtyFlag_[4] = true;
}

const int32_t &UserRoomsWithMessagesView::getValueOfMessageId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(messageId_)
        return *messageId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &UserRoomsWithMessagesView::getMessageId() const noexcept
{
    return messageId_;
}
void UserRoomsWithMessagesView::setMessageId(const int32_t &pMessageId) noexcept
{
    messageId_ = std::make_shared<int32_t>(pMessageId);
    dirtyFlag_[5] = true;
}
void UserRoomsWithMessagesView::setMessageIdToNull() noexcept
{
    messageId_.reset();
    dirtyFlag_[5] = true;
}

const std::string &UserRoomsWithMessagesView::getValueOfMessageContent() const noexcept
{
    static const std::string defaultValue = std::string();
    if(messageContent_)
        return *messageContent_;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserRoomsWithMessagesView::getMessageContent() const noexcept
{
    return messageContent_;
}
void UserRoomsWithMessagesView::setMessageContent(const std::string &pMessageContent) noexcept
{
    messageContent_ = std::make_shared<std::string>(pMessageContent);
    dirtyFlag_[6] = true;
}
void UserRoomsWithMessagesView::setMessageContent(std::string &&pMessageContent) noexcept
{
    messageContent_ = std::make_shared<std::string>(std::move(pMessageContent));
    dirtyFlag_[6] = true;
}
void UserRoomsWithMessagesView::setMessageContentToNull() noexcept
{
    messageContent_.reset();
    dirtyFlag_[6] = true;
}

const ::trantor::Date &UserRoomsWithMessagesView::getValueOfMessageCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(messageCreatedAt_)
        return *messageCreatedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &UserRoomsWithMessagesView::getMessageCreatedAt() const noexcept
{
    return messageCreatedAt_;
}
void UserRoomsWithMessagesView::setMessageCreatedAt(const ::trantor::Date &pMessageCreatedAt) noexcept
{
    messageCreatedAt_ = std::make_shared<::trantor::Date>(pMessageCreatedAt);
    dirtyFlag_[7] = true;
}
void UserRoomsWithMessagesView::setMessageCreatedAtToNull() noexcept
{
    messageCreatedAt_.reset();
    dirtyFlag_[7] = true;
}

const int32_t &UserRoomsWithMessagesView::getValueOfSenderId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(senderId_)
        return *senderId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &UserRoomsWithMessagesView::getSenderId() const noexcept
{
    return senderId_;
}
void UserRoomsWithMessagesView::setSenderId(const int32_t &pSenderId) noexcept
{
    senderId_ = std::make_shared<int32_t>(pSenderId);
    dirtyFlag_[8] = true;
}
void UserRoomsWithMessagesView::setSenderIdToNull() noexcept
{
    senderId_.reset();
    dirtyFlag_[8] = true;
}

const std::string &UserRoomsWithMessagesView::getValueOfSenderUsername() const noexcept
{
    static const std::string defaultValue = std::string();
    if(senderUsername_)
        return *senderUsername_;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserRoomsWithMessagesView::getSenderUsername() const noexcept
{
    return senderUsername_;
}
void UserRoomsWithMessagesView::setSenderUsername(const std::string &pSenderUsername) noexcept
{
    senderUsername_ = std::make_shared<std::string>(pSenderUsername);
    dirtyFlag_[9] = true;
}
void UserRoomsWithMessagesView::setSenderUsername(std::string &&pSenderUsername) noexcept
{
    senderUsername_ = std::make_shared<std::string>(std::move(pSenderUsername));
    dirtyFlag_[9] = true;
}
void UserRoomsWithMessagesView::setSenderUsernameToNull() noexcept
{
    senderUsername_.reset();
    dirtyFlag_[9] = true;
}

const std::string &UserRoomsWithMessagesView::getValueOfSenderAvatar() const noexcept
{
    static const std::string defaultValue = std::string();
    if(senderAvatar_)
        return *senderAvatar_;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserRoomsWithMessagesView::getSenderAvatar() const noexcept
{
    return senderAvatar_;
}
void UserRoomsWithMessagesView::setSenderAvatar(const std::string &pSenderAvatar) noexcept
{
    senderAvatar_ = std::make_shared<std::string>(pSenderAvatar);
    dirtyFlag_[10] = true;
}
void UserRoomsWithMessagesView::setSenderAvatar(std::string &&pSenderAvatar) noexcept
{
    senderAvatar_ = std::make_shared<std::string>(std::move(pSenderAvatar));
    dirtyFlag_[10] = true;
}
void UserRoomsWithMessagesView::setSenderAvatarToNull() noexcept
{
    senderAvatar_.reset();
    dirtyFlag_[10] = true;
}

void UserRoomsWithMessagesView::updateId(const uint64_t id)
{
}

const std::vector<std::string> &UserRoomsWithMessagesView::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "user_id",
        "id",
        "name",
        "type",
        "avatar_url",
        "message_id",
        "message_content",
        "message_created_at",
        "sender_id",
        "sender_username",
        "sender_avatar"
    };
    return inCols;
}

void UserRoomsWithMessagesView::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getAvatarUrl())
        {
            binder << getValueOfAvatarUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getMessageId())
        {
            binder << getValueOfMessageId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getMessageContent())
        {
            binder << getValueOfMessageContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getMessageCreatedAt())
        {
            binder << getValueOfMessageCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSenderId())
        {
            binder << getValueOfSenderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getSenderUsername())
        {
            binder << getValueOfSenderUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getSenderAvatar())
        {
            binder << getValueOfSenderAvatar();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> UserRoomsWithMessagesView::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    return ret;
}

void UserRoomsWithMessagesView::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getAvatarUrl())
        {
            binder << getValueOfAvatarUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getMessageId())
        {
            binder << getValueOfMessageId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getMessageContent())
        {
            binder << getValueOfMessageContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getMessageCreatedAt())
        {
            binder << getValueOfMessageCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSenderId())
        {
            binder << getValueOfSenderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getSenderUsername())
        {
            binder << getValueOfSenderUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getSenderAvatar())
        {
            binder << getValueOfSenderAvatar();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value UserRoomsWithMessagesView::toJson() const
{
    Json::Value ret;
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getAvatarUrl())
    {
        ret["avatar_url"]=getValueOfAvatarUrl();
    }
    else
    {
        ret["avatar_url"]=Json::Value();
    }
    if(getMessageId())
    {
        ret["message_id"]=getValueOfMessageId();
    }
    else
    {
        ret["message_id"]=Json::Value();
    }
    if(getMessageContent())
    {
        ret["message_content"]=getValueOfMessageContent();
    }
    else
    {
        ret["message_content"]=Json::Value();
    }
    if(getMessageCreatedAt())
    {
        ret["message_created_at"]=getMessageCreatedAt()->secondsSinceEpoch();
    }
    else
    {
        ret["message_created_at"]=Json::Value();
    }
    if(getSenderId())
    {
        ret["sender_id"]=getValueOfSenderId();
    }
    else
    {
        ret["sender_id"]=Json::Value();
    }
    if(getSenderUsername())
    {
        ret["sender_username"]=getValueOfSenderUsername();
    }
    else
    {
        ret["sender_username"]=Json::Value();
    }
    if(getSenderAvatar())
    {
        ret["sender_avatar"]=getValueOfSenderAvatar();
    }
    else
    {
        ret["sender_avatar"]=Json::Value();
    }
    return ret;
}

Json::Value UserRoomsWithMessagesView::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 11)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[0]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[1]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[2]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[3]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getAvatarUrl())
            {
                ret[pMasqueradingVector[4]]=getValueOfAvatarUrl();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getMessageId())
            {
                ret[pMasqueradingVector[5]]=getValueOfMessageId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getMessageContent())
            {
                ret[pMasqueradingVector[6]]=getValueOfMessageContent();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getMessageCreatedAt())
            {
                ret[pMasqueradingVector[7]]=getMessageCreatedAt()->secondsSinceEpoch();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getSenderId())
            {
                ret[pMasqueradingVector[8]]=getValueOfSenderId();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getSenderUsername())
            {
                ret[pMasqueradingVector[9]]=getValueOfSenderUsername();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getSenderAvatar())
            {
                ret[pMasqueradingVector[10]]=getValueOfSenderAvatar();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getAvatarUrl())
    {
        ret["avatar_url"]=getValueOfAvatarUrl();
    }
    else
    {
        ret["avatar_url"]=Json::Value();
    }
    if(getMessageId())
    {
        ret["message_id"]=getValueOfMessageId();
    }
    else
    {
        ret["message_id"]=Json::Value();
    }
    if(getMessageContent())
    {
        ret["message_content"]=getValueOfMessageContent();
    }
    else
    {
        ret["message_content"]=Json::Value();
    }
    if(getMessageCreatedAt())
    {
        ret["message_created_at"]=getMessageCreatedAt()->secondsSinceEpoch();
    }
    else
    {
        ret["message_created_at"]=Json::Value();
    }
    if(getSenderId())
    {
        ret["sender_id"]=getValueOfSenderId();
    }
    else
    {
        ret["sender_id"]=Json::Value();
    }
    if(getSenderUsername())
    {
        ret["sender_username"]=getValueOfSenderUsername();
    }
    else
    {
        ret["sender_username"]=Json::Value();
    }
    if(getSenderAvatar())
    {
        ret["sender_avatar"]=getValueOfSenderAvatar();
    }
    else
    {
        ret["sender_avatar"]=Json::Value();
    }
    return ret;
}

bool UserRoomsWithMessagesView::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(0, "user_id", pJson["user_id"], err, true))
            return false;
    }
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(1, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(2, "name", pJson["name"], err, true))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(3, "type", pJson["type"], err, true))
            return false;
    }
    if(pJson.isMember("avatar_url"))
    {
        if(!validJsonOfField(4, "avatar_url", pJson["avatar_url"], err, true))
            return false;
    }
    if(pJson.isMember("message_id"))
    {
        if(!validJsonOfField(5, "message_id", pJson["message_id"], err, true))
            return false;
    }
    if(pJson.isMember("message_content"))
    {
        if(!validJsonOfField(6, "message_content", pJson["message_content"], err, true))
            return false;
    }
    if(pJson.isMember("message_created_at"))
    {
        if(!validJsonOfField(7, "message_created_at", pJson["message_created_at"], err, true))
            return false;
    }
    if(pJson.isMember("sender_id"))
    {
        if(!validJsonOfField(8, "sender_id", pJson["sender_id"], err, true))
            return false;
    }
    if(pJson.isMember("sender_username"))
    {
        if(!validJsonOfField(9, "sender_username", pJson["sender_username"], err, true))
            return false;
    }
    if(pJson.isMember("sender_avatar"))
    {
        if(!validJsonOfField(10, "sender_avatar", pJson["sender_avatar"], err, true))
            return false;
    }
    return true;
}
bool UserRoomsWithMessagesView::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                                   const std::vector<std::string> &pMasqueradingVector,
                                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool UserRoomsWithMessagesView::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(0, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(1, "id", pJson["id"], err, false))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(2, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(3, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("avatar_url"))
    {
        if(!validJsonOfField(4, "avatar_url", pJson["avatar_url"], err, false))
            return false;
    }
    if(pJson.isMember("message_id"))
    {
        if(!validJsonOfField(5, "message_id", pJson["message_id"], err, false))
            return false;
    }
    if(pJson.isMember("message_content"))
    {
        if(!validJsonOfField(6, "message_content", pJson["message_content"], err, false))
            return false;
    }
    if(pJson.isMember("message_created_at"))
    {
        if(!validJsonOfField(7, "message_created_at", pJson["message_created_at"], err, false))
            return false;
    }
    if(pJson.isMember("sender_id"))
    {
        if(!validJsonOfField(8, "sender_id", pJson["sender_id"], err, false))
            return false;
    }
    if(pJson.isMember("sender_username"))
    {
        if(!validJsonOfField(9, "sender_username", pJson["sender_username"], err, false))
            return false;
    }
    if(pJson.isMember("sender_avatar"))
    {
        if(!validJsonOfField(10, "sender_avatar", pJson["sender_avatar"], err, false))
            return false;
    }
    return true;
}
bool UserRoomsWithMessagesView::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                                 const std::vector<std::string> &pMasqueradingVector,
                                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool UserRoomsWithMessagesView::validJsonOfField(size_t index,
                                                 const std::string &fieldName,
                                                 const Json::Value &pJson,
                                                 std::string &err,
                                                 bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 1024)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1024)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 1024)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1024)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
